from typing import Optional
from sqlalchemy.orm import Session
from app.database.models import Contact, User
from app.database.schemas import (
    ContactCreate, ContactUpdate,
    UserCreate, UserResponse
)
from app.services.security import hash_password, verify_password as verify_password_service  # üîπ –Ü–º–ø–æ—Ä—Ç –∑ –æ–¥–Ω–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞


# üîπ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (User)
def create_user(db: Session, user: UserCreate) -> UserResponse:
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ö–µ—à—É–≤–∞–Ω–Ω—è–º –ø–∞—Ä–æ–ª—è.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param user: –î–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.
    :return: –û–±'—î–∫—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    hashed_password = hash_password(user.password)
    db_user = User(
        username=user.username,
        email=user.email,
        password_hash=hashed_password
    )
    db.add(db_user)
    db.commit()
    db.refresh(db_user)

    return UserResponse(
        id=db_user.id,
        username=db_user.username,
        email=db_user.email,
        is_verified=db_user.is_verified,
        avatar_url=db_user.avatar_url,
        created_at=db_user.created_at,
        updated_at=db_user.updated_at
    )


def get_user_by_email(db: Session, email: str):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param email: Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    :return: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ None.
    """
    return db.query(User).filter(User.email == email).first()


def get_user_by_id(db: Session, user_id: int):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    :return: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ None.
    """
    return db.query(User).filter(User.id == user_id).first()


def update_avatar(db: Session, user: User, avatar_path: str):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —à–ª—è—Ö—É –¥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param user: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏.
    :param avatar_path: –ù–æ–≤–∏–π —à–ª—è—Ö –¥–æ –∞–≤–∞—Ç–∞—Ä–∞.
    :return: –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á.
    """
    user.avatar_url = avatar_path
    db.commit()
    db.refresh(user)
    return user


def update_user_password(db: Session, email: str, new_password: str) -> Optional[User]:
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ email.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param email: Email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è.
    :param new_password: –ù–æ–≤–∏–π –ø–∞—Ä–æ–ª—å.
    :return: –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ None.
    """
    user = get_user_by_email(db, email)
    if not user:
        return None
    user.password_hash = hash_password(new_password)
    db.commit()
    db.refresh(user)
    return user


# üîπ –û–ø–µ—Ä–∞—Ü—ñ—ó –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (Contact)
def create_contact(db: Session, contact: ContactCreate, user_id: int):
    """
    –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param contact: –î–∞–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.
    :return: –°—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.
    """
    db_contact = Contact(
        **contact.model_dump(),
        user_id=user_id
    )
    db.add(db_contact)
    db.commit()
    db.refresh(db_contact)
    return db_contact


def get_contacts(db: Session, user_id: int):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –∫–æ–Ω—Ç–∞–∫—Ç–∏ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ—Ç—Ä–∏–º–∞—Ç–∏.
    :return: –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    """
    return db.query(Contact).filter(Contact.user_id == user_id).all()


def get_contact_by_id(db: Session, contact_id: int, user_id: int):
    """
    –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ ID (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ).

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    :return: –ö–æ–Ω—Ç–∞–∫—Ç –∞–±–æ None.
    """
    return db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()


def update_contact(db: Session, contact_id: int, contact: ContactUpdate, user_id: int):
    """
    –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    :param contact: –î–∞–Ω—ñ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.
    :return: –û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç.
    """
    db_contact = db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()
    if db_contact:
        for key, value in contact.model_dump(exclude_unset=True).items():
            setattr(db_contact, key, value)
        db.commit()
        db.refresh(db_contact)
    return db_contact


def delete_contact(db: Session, contact_id: int, user_id: int):
    """
    –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–º—É –Ω–∞–ª–µ–∂–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.
    :return: –í–∏–¥–∞–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç –∞–±–æ None.
    """
    db_contact = db.query(Contact).filter(Contact.id == contact_id, Contact.user_id == user_id).first()
    if db_contact:
        db.delete(db_contact)
        db.commit()
    return db_contact


# üîπ –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (User)
def delete_user(db: Session, user_id: int):
    """
    –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ ID.

    :param db: –°–µ—Å—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.
    :param user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    :return: –í–∏–¥–∞–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ None.
    """
    db_user = db.query(User).filter(User.id == user_id).first()
    if db_user:
        db.delete(db_user)
        db.commit()
    return db_user


# üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
def verify_password(plain_password: str, hashed_password: str) -> bool:
    """
    –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–æ–º—É —Ö–µ—à—É.

    :param plain_password: –í–≤–µ–¥–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –ø–∞—Ä–æ–ª—å.
    :param hashed_password: –ó–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ö–µ—à –ø–∞—Ä–æ–ª—è.
    :return: True, —è–∫—â–æ –ø–∞—Ä–æ–ª—ñ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å, —ñ–Ω–∞–∫—à–µ False.
    """
    return verify_password_service(plain_password, hashed_password)
